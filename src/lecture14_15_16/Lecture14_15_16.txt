Comparator (I) -> compare()
* used to define our own sorting (custom/customized sorting)
* default natural sorting order ->
	1) Integer -> ascending
	2) String -> alphabetical/dictionary order

* public int compare(Object obj1, Object obj2) // compare(10, 20)
1) return negative(-), if obj1 has to come before obj2
2) return positive(+), if obj1 has to come after obj2
3) return 0, if obj1 & obj2 are equal

----------------------------------------------------------------------
// sorting objects without lambda expression

class MyComparator implements Comparator<Integer> {

	@Override
	public int compare(Integer o1, Integer o2) {
//		if (o1>o2) {
//			return -1;
//		} if(o1<o2) {
//			return +1;
//		} else {
//			return 0;
//		}
		return (o1>o2) ? -1 : (o1<o2) ? 1 : 0;
	}
	
}
public class Without {
	public static void main(String[] args) {
		ArrayList<Integer> al = new ArrayList<>();
		al.add(50);
		al.add(60);
		al.add(10);
		al.add(30);
		al.add(70);
		System.out.println("before sorting:"+al);
		Collections.sort(al);
		System.out.println("after sorting:"+al);
		Collections.sort(al, new MyComparator());
		System.out.println("descending order:"+al);
		
	}
}

------------------------------------------------------------------------
// sorting objects with lambda expression

public class With {
	public static void main(String[] args) {
		ArrayList<Integer> arrayList = new ArrayList<>();
		arrayList.add(80);
		arrayList.add(40);
		arrayList.add(20);
		arrayList.add(60);
		arrayList.add(10);
		System.out.println("before sorting : " + arrayList);
		Collections.sort(arrayList);
		System.out.println("after sorting : " + arrayList);
		Collections.sort(arrayList, (obj1, obj2) -> (obj1>obj2) ? -1 : (obj1<obj2) ? 1 : 0 );
		System.out.println("descending order : " + arrayList);
	}
}

