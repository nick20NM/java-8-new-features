// case-1, when more than one abstract methods

interface Interface1 {
	void m1(int i);
//	void m2(int i);
}
public class Case1 {
	public static void main(String[] args) {
		Interface1 i1 = i->System.out.println(i*i);
		i1.m1(5);
	}
}
//Case1.java:10: error: incompatible types: Interface1 is not a functional interface
//Interface1 i1 = i->System.out.println(i*i);
//                ^
//multiple non-overriding abstract methods found in interface Interface1
//1 error

--------------------------------------------------------------------------------------

// case-2, advantage of @FunctionalInterface -> is to tell an interface can contain only one abstract method

@FunctionalInterface
interface Interface2 {
	void m1();
//	void m2(); // compile time error
}
public class Case2 {
	public static void main(String[] args) {
		Interface2 a = ()->System.out.println("hello");
		a.m1();
	}
}
//Case2.java:4: error: Unexpected @FunctionalInterface annotation
//@FunctionalInterface
//^
//  Interface2 is not a functional interface
//    multiple non-overriding abstract methods found in interface Interface2
//Case2.java:11: error: incompatible types: Interface2 is not a functional interface
//                Interface2 a = ()->System.out.println("hello");
//                               ^
//    multiple non-overriding abstract methods found in interface Interface2
//2 errors